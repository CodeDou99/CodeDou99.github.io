{"meta":{"title":"走走停停的博客","subtitle":"加油啊","description":"","author":"DGN","url":"http://example.com","root":"/"},"pages":[{"title":"tags","date":"2024-07-27T23:25:22.000Z","updated":"2024-07-27T23:25:22.497Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2024-07-27T23:25:39.000Z","updated":"2024-07-27T23:25:39.208Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Leet33搜索旋转排序数组","slug":"Leet33搜索旋转排序数组","date":"2024-07-30T23:32:14.000Z","updated":"2024-07-30T23:42:32.219Z","comments":true,"path":"2024/07/31/Leet33搜索旋转排序数组/","permalink":"http://example.com/2024/07/31/Leet33%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/","excerpt":"","text":"题目内容： 12345678910111213141516171819202122232425262728整数数组 nums 按升序排列，数组中的值 互不相同 。在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。示例 1：输入：nums = [4,5,6,7,0,1,2], target = 0输出：4示例 2：输入：nums = [4,5,6,7,0,1,2], target = 3输出：-1示例 3：输入：nums = [1], target = 0输出：-1提示：1 &lt;= nums.length &lt;= 5000-104 &lt;= nums[i] &lt;= 104nums 中的每个值都 独一无二题目数据保证 nums 在预先未知的某个下标上进行了旋转-104 &lt;= target &lt;= 104 首先提炼关键信息，nums 旋转前是升序数组，旋转相当于头尾连接再切分，target 是要寻找的目标值，找到返回下标，否则返回-1 时间复杂度要求 O(log n)，应该是要求使用二分查找 但是数组旋转后不是有序的了，要解决此问题 方法：（没有想到具体怎么用二分操作，看的答案） 123456789101112131415161718192021222324252627282930public int search(int[] nums, int target) &#123; int n = nums.length; if (n == 0) return -1; if (n == 1) return nums[0] == target ? 0 : -1; int l = 0, r = n - 1; while (l &lt;= r) &#123; int mid = (l + r) / 2; if (nums[mid] == target) return mid;//直接在前面处理了 nums[mid]==target的情况，后面更好分析// 如果前半部分有序 if (nums[0] &lt; nums[mid]) &#123;// 如果target位于0-mid if (nums[0] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;//因为前面排除了nums[mid]==target的情况，所以此时只有大于，小于两种情况 r = mid - 1; &#125; else &#123;//前面部分是有序的，既然不满足前面的条件，target必定在后面的区间，但后面的区间是无序的，可以再次二分，判断在不在有序的部分。 l = mid + 1; &#125;// 如果后半部分有序 &#125; else &#123;// 如果target位于mid- n-1 if (nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - 1]) &#123; l = mid + 1; &#125; else &#123; r = mid - 1; &#125; &#125; &#125; return -1; &#125;","categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://example.com/tags/LeetCode/"},{"name":"二分查找","slug":"二分查找","permalink":"http://example.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"hexo快速搭建个人博客","slug":"hexo快速搭建个人博客","date":"2024-07-27T20:26:01.000Z","updated":"2024-07-27T20:26:57.168Z","comments":true,"path":"2024/07/28/hexo快速搭建个人博客/","permalink":"http://example.com/2024/07/28/hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"参考链接： https://www.cnblogs.com/chenlove/p/15058170.htmlhttps://blog.csdn.net/weixin_51363613/article/details/140578937 hexo 是什么？一个用于便于搭建个人博客的前端框架，需要使用 npm 进行下载安装 为了方便同步到 github，需要先安装 Git为了下载安装 hexo，需要先安装 nodejs为了更好的管理 nodejs，可以先安装 nvm，这个可以很方便的切换和安装各个版本的 nodejs为了更快速的下载各种依赖，可以先使用 Nodejs 安装 nrm，再切换到淘宝镜像 nodejs 安装详情查看 nodejs 笔记[[nodejs]] Git 安装 官方下载： https://git-scm.com/ 下载安装包后一路同意即可 建议：安装 hexo 之前先将 Git 与 github 使用 ssh 建立连接 git 配置 ssh key 为什么要配置 SSH key？目的：可以免密将本地的源码和资源上传到 github，无需每次都输账号和密码 设置 Git账号和邮箱 12git config --global user.name &quot;username&quot;git config --global user.email &quot;xxx@163.com&quot; 先查看本地是否配置好 SSH key，在 git bash 中 命令：cd ~/.ssh，成功进入路径即表示配置好了 12345Admin@DESKTOP-54I0NJ3 MINGW64 /d/Notes/MyBlog (master)$ cd ~/.sshAdmin@DESKTOP-54I0NJ3 MINGW64 ~/.ssh 显示：No such filr or firecotry 表示没有配置 ssh 配置好后是保存到 C:/Users/用户名/.ssh 文件夹 生成 ssh key：ssh-keygen -t rsa -C &quot;邮件地址&quot;，之后连续回车三次（会询问你密钥保存位置和 是否设置私钥代码等），可以看到在 .ssh 文件夹下生成了(-t 选项用于指定密钥类型，rsa 代表一种密码算法，还有一种 dsa，证书常用的是 rsa。-C 选项允许你添加一个注释或标记到你的公钥文件中，后面接的是你的注释)id_rsa 和 id_rsa.pub 文件，这代表 私钥和公钥，复制公钥中的全部内容接着打开 github 主页，点击个人设置，点击左侧的 SSH and GPG keys，new 一个 ssh key，title 随便起一个名字，将内容复制到 key 中，点击 Add SSH key。 测试是否成功ssh -T git@github.com出现 You are successfully… but Github does…. 表示连接成功 搭建个人博客安装 hexo安装命令：npm install hexo -g查看版本：hexo -v安装 hexo 依赖：npm install --save hexo-deployer-git 后续步骤跟着做就行了： https://www.cnblogs.com/chenlove/p/15058170.html 写新文章步骤：1）创建新文章：hexo n &quot;文章名称&quot;2）自己使用常用的 markdown 编辑器，进行编辑3）清除缓存，升成静态网页，并开启 hexo hexo clean &amp;&amp; hexo g &amp;&amp; hexo s4）发布：hexo d（其实是使用 hexo-deployer-git 将升成的静态文件自动部署到 git 仓库） 开启 steam++ 加速方案 Github 会导致 hexo d 失败未进行 hexo clean 清除缓存，可能会导致 github 网页没有变化","categories":[],"tags":[]},{"title":"nodejs","slug":"nodejs","date":"2024-07-27T20:10:56.000Z","updated":"2024-07-27T20:11:36.034Z","comments":true,"path":"2024/07/28/nodejs/","permalink":"http://example.com/2024/07/28/nodejs/","excerpt":"","text":"使用 NVM 安装和管理 nodejs 为什么要使用 nvm 管理 nodejs？当前安装的 node.js 版本与项目所使用的 node.js 版本不一致，会导致 npm install 发生错误 前置条件一、卸载已安装的 nodejs12#查看是否已安装node.jsnode -v 未安装未安装 node.js 可以跳过此步骤 已安装需要卸载删除已安装的 nodejs打开控制面板，卸载nodejs 即可。 二、安装NVM1、下载安装包 从 github 下载安装包，直接默认安装即可。https://github.com/coreybutler/nvm-windows/releases2、nvm -v 查看是否安装成功，以及 nvm 的版本 三、安装 node.js1234#查看可用的node.js稳定版本nvm list available#下载指定的node.js版本nvm install 20.15.0 四、相关命令123456#查看已安装的node.jsnvm list#切换当前使用版本nvm use 20.15.0#卸载node.js版本nvm uninstall 20.15.0 五、安装nrm，切换npm 镜像全局安装nrm：npm install -g nrm查看镜像源列表：nrm ls 1234567C:\\Users\\Admin&gt;nrm ls npm ---------- https://registry.npmjs.org/ yarn --------- https://registry.yarnpkg.com/ tencent ------ https://mirrors.cloud.tencent.com/npm/ cnpm --------- https://r.cnpmjs.org/* taobao ------- https://registry.npmmirror.com/ npmMirror ---- https://skimdb.npmjs.com/registry/ 查看当前源：nrm currnet 12C:\\Users\\Admin&gt;nrm currentYou are using taobao registry. 切换镜像源：nrm use taobao","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2024-07-21T13:38:40.495Z","updated":"2024-07-21T08:59:14.475Z","comments":true,"path":"2024/07/21/hello-world/","permalink":"http://example.com/2024/07/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://example.com/tags/LeetCode/"},{"name":"二分查找","slug":"二分查找","permalink":"http://example.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]}